// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?

const EULER_12_NUMBER = 500;

export default class Euler12 {
  numberOfDivisors: number;

  constructor() {
    this.numberOfDivisors = EULER_12_NUMBER;
  }

  getTriangleNumber = (number: number) => {
    let sum = 0;

    for (let i = 1; i <= number; i += 1) {
      sum += i;
    }

    return sum;
  }

  getFactors = (number: number) => {
    if (number === 1) return [1];

    const array = [];
    let i = 1;
    let max = number;

    while (i < max) {
      if (number % i === 0) {
        array.push(i);

        if (i !== number / i) {
          array.push(number / i);
        }

        max = number / i;
      }

      i += 1;
    }

    return array.sort((a, b) =>  a - b);
  }

  getResult = () => {
    let i = 1;

    while (this.getFactors(this.getTriangleNumber(i)).length < this.numberOfDivisors) {
      i += 1;
    }

    return this.getTriangleNumber(i);
  }
}

// console.time();
// console.log(new Euler12().getResult());
// console.timeEnd();
