// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?

const EULER_12_NUMBER = 500;

export default class Euler12 {
  numberOfDivisors: number;
  resultTriangleNumber = 0;
  dividors: number[] = [1];

  constructor() {
    this.numberOfDivisors = EULER_12_NUMBER;
  }

  getResult = () => {
    let counter = 0;

    while (this.dividors.length <= this.numberOfDivisors) {
      this.dividors = [];
      this.resultTriangleNumber = this.resultTriangleNumber + counter;

      for (let i = 1; i <= Math.sqrt(this.resultTriangleNumber); i += 1) {
        if (this.resultTriangleNumber % i === 0) {
          this.dividors.push(i);
        }
      }

      counter += 2;
    }

    return this.resultTriangleNumber;
  }
}

console.time();
console.log(new Euler12().getResult());
console.timeEnd();
